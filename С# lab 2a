Задание 1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    class Matrix
    {
        
        private int n;
        private int[,] mass;

        
        public Matrix() { }
        public int N 
        {
            get { return n; }
            set { if (value > 0) n = value; }
        }

        public Matrix(int n)
        {
            this.n = n;
            mass = new int[this.n, this.n];
        }
        public int this[int i, int j]
        {
            get
            {
                return mass[i, j];
            }
            set
            {
                mass[i, j] = value;
            }
        }

        public void WriteMat()
        {
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.WriteLine("Введите элемент матрицы {0}:{1}", i + 1, j + 1);
                    mass[i, j] = Convert.ToInt32(Console.ReadLine());
                }
            }
        }

        
        public void ReadMat()
        {
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write(mass[i, j] + "\t");
                }
                Console.WriteLine();
            }
        }


        public void oneMat(Matrix a)
        {
            int count = 0;
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    if (a[i, j] == 1 && i == j)
                    {
                        count++;
                    }
                }

            }
            if (count == a.N)
            {
                Console.WriteLine("Единичная");
            }
            else Console.WriteLine("Не единичная");
        }


      
        public static Matrix umnch(Matrix a, int ch)
        {
            Matrix resMass = new Matrix(a.N);
            for (int i = 0; i < a.N; i++)
            {
                for (int j = 0; j < a.N; j++)
                {
                    resMass[i, j] = a[i, j] * ch;
                }
            }
            return resMass;
        }


        public static Matrix umn(Matrix a, Matrix b)
        {
            Matrix resMass = new Matrix(a.N);
            for (int i = 0; i < a.N; i++)
                for (int j = 0; j < b.N; j++)
                    for (int k = 0; k < b.N; k++)
                        resMass[i, j] += a[i, k] * b[k, j];

            return resMass;
        }



        public static Matrix operator *(Matrix a, Matrix b)
        {
            return Matrix.umn(a, b);
        }

        public static Matrix operator *(Matrix a, int b)
        {
            return Matrix.umnch(a, b);
        }


 
        public static Matrix razn(Matrix a, Matrix b)
        {
            Matrix resMass = new Matrix(a.N);
            for (int i = 0; i < a.N; i++)
            {
                for (int j = 0; j < b.N; j++)
                {
                    resMass[i, j] = a[i, j] - b[i, j];
                }
            }
            return resMass;
        }

   
        public static Matrix operator -(Matrix a, Matrix b)
        {
            return Matrix.razn(a, b);
        }
        public static Matrix Sum(Matrix a, Matrix b)
        {
            Matrix resMass = new Matrix(a.N);
            for (int i = 0; i < a.N; i++)
            {
                for (int j = 0; j < b.N; j++)
                {
                    resMass[i, j] = a[i, j] + b[i, j];
                }
            }
            return resMass;
        }
    
        public static Matrix operator +(Matrix a, Matrix b)
        {
            return Matrix.Sum(a, b);
        }
   
        ~Matrix()
        {
            Console.WriteLine("Очистка");
        }

    }
    class MainProgram
    {

        static void Main(string[] args)
        {
            Console.WriteLine("Введите размерность матрицы: ");
            int nn = Convert.ToInt32(Console.ReadLine());
          
            Matrix mass1 = new Matrix(nn);
            Matrix mass2 = new Matrix(nn);
            Matrix mass3 = new Matrix(nn);
            Matrix mass4 = new Matrix(nn);
            Matrix mass5 = new Matrix(nn);
            Matrix mass6 = new Matrix(nn);
            Matrix mass7 = new Matrix(nn);
            Matrix mass8 = new Matrix(nn);
            Console.WriteLine("ввод Матрица А: ");
            mass1.WriteMat();
            Console.WriteLine("Ввод Матрица B: ");
            mass2.WriteMat();

            Console.WriteLine("Матрица А: ");
            mass1.ReadMat();
            Console.WriteLine();
            Console.WriteLine("Матрица В: ");
            Console.WriteLine();
            mass2.ReadMat();

            Console.WriteLine("Сложение матриц А и Б: ");
            mass4 = (mass1 + mass2);
            mass4.ReadMat();

            Console.WriteLine("Вычитание матриц А и Б: ");
            mass6 = (mass1 - mass2);
            mass6.ReadMat();

            Console.WriteLine("Умножение матриц А и Б: ");
            mass8 = (mass1 * mass2);
            mass8.ReadMat();

            Console.WriteLine("Умножение матрицы А на число 2: ");
            mass5 = (mass1 * 2);
            mass5.ReadMat();

            Console.WriteLine("Матрица D по формуле  C=2(A-B)*((A^2)-B): ");
            mass7 = ((mass1 - mass2) * ((mass1 * mass1) + mass2)*2);
            mass7.ReadMat();


            Console.ReadKey();
        }
    }
}


Задание 2

using System;
class Kvadrat
{
    protected int storona;

    public Kvadrat()
    {
        storona = 0;
    }

    public Kvadrat(int st)
    {
        storona = st;
    }

    public int Storona
    {
        get { return storona; }
        set { storona = value; }
    }

    public virtual string Info()
    {
        return string.Format("Квадрат");
    }

    public virtual int Area()
    {
        return storona * storona;
    }

    public virtual int Perimeter()
    {
        return 4 * storona;
    }

    public virtual double Diagonal()
    {
        return Math.Sqrt(2 * storona * storona);
    }
};

class Piramida : Kvadrat
{
    protected int visota;
    public Piramida()
        : base()
    {
        visota = 0;
    }

    public Piramida(int st, int vst)
        : base(st)
    {
        visota = vst;
    }
    public int Visota
    {
        get { return visota; }
        set { visota = value; }
    }

    public override string Info()
    {
        return string.Format("Пирамида");
    }

    public override int Area()
    {
        return base.Area() + 2 * visota * storona;
    }

    public double Objom()
    {
        return (storona * storona * visota) / 3;
    }
}

class Program
{
    static void Main(string[] args)
    {
        int storona;
        Console.WriteLine("Введите длину стороны :");
        storona = Convert.ToInt32(Console.ReadLine());
        Kvadrat kv1 = new Kvadrat(storona);

        Console.WriteLine(kv1.Info());
        Console.WriteLine("Площадь {0}", kv1.Area());
        Console.WriteLine("Периметр {0}", kv1.Perimeter());
        Console.WriteLine("Диагональ {0}", kv1.Diagonal());
        Console.WriteLine();

        int visota;
        Console.WriteLine("Введите длину высоты :");
        visota = Convert.ToInt32(Console.ReadLine());

        Piramida pr1 = new Piramida(storona, visota);
        Console.WriteLine(pr1.Info());
        Console.WriteLine("Площадь {0}", pr1.Area());
        Console.WriteLine("Обьем {0}", pr1.Objom());

        Console.ReadKey();
    }
}


Задание 3

using System;
class Kvadrat
{
    protected int storona;

    public Kvadrat()
    {
        storona = 0;
    }

    public Kvadrat(int st)
    {
        storona = st;
    }

    public int Storona
    {
        get { return storona; }
        set { storona = value; }
    }



    public virtual int Area()
    {
        return storona * storona;
    }

    public virtual int Perimeter()
    {
        return 4 * storona;
    }

    public virtual double Diagonal()
    {
        return Math.Sqrt(2 * storona * storona);
    }
};

class Piramida : Kvadrat
{
    protected int visota;
    public Piramida()
        : base()
    {
        visota = 0;
    }

    public Piramida(int st, int vst)
        : base(st)
    {
        visota = vst;
    }
    public int Visota
    {
        get { return visota; }
        set { visota = value; }
    }

    public override string Info()
    {
        return string.Format("Пирамида");
    }

 

    public double Objom()
    {
        return (storona * storona * visota) / 3;
    }
}

class Program
{
    static void Main(string[] args)
    {
        int storona;
        Console.WriteLine("Введите длину стороны :");
        storona = Convert.ToInt32(Console.ReadLine());
        Kvadrat kv1 = new Kvadrat(storona);

    

        int visota;
        Console.WriteLine("Введите длину высоты :");
        visota = Convert.ToInt32(Console.ReadLine());

        Piramida pr1 = new Piramida(storona, visota);
        Console.WriteLine(pr1.Info());
        Console.WriteLine("Обьем {0}", pr1.Objom());

        Console.ReadKey();
    }
}

задание 4

using System;
 

    class Money
    {
        private int banknotesValue; // int first
        private int banknotesCounts; // int second
        private int totalSumm;
 
        public Money(int value, int counts) // конструктор
        {
            this.banknotesValue = value;
            this.banknotesCounts = counts;
            this.totalSumm = value * counts;
        }
 
        public void ShowAll() 
        {
            Console.WriteLine("Value - {0}, counts - {1}", banknotesValue, banknotesCounts);
        }
 
        public bool CostEstimation(int productPrice)  
        {
            if (totalSumm > productPrice)
            {
                Console.WriteLine("You have enough money to buy this product");
                return true;
            }
            else
            {
                Console.WriteLine("You don't have enough money to buy this product");
                return false;
            }
        }
 
        public int GetNumberOfPieces(int productPrice) 
        {
            if (productPrice != 0)
            {
                return totalSumm / productPrice;
            }
            else 
            {
                Console.WriteLine("Wrong product price");
                return 0;
            }
        }
 
        public int BanknotesValue
        {
            get { return this.banknotesValue; }
            set { this.banknotesValue = value; }
        }
 
        public int BanknotesCounts
        {
            get { return this.banknotesCounts; }
            set { this.banknotesCounts = value; }
        }
 
        public int TotalSumm
        {
            get { return this.totalSumm; }
        }
    }


Задание 5

using System;
using System.IO;
using System.Threading;
using System.Globalization;

using CenterSpace.NMath.Core;

namespace CenterSpace.NMath.Core.Examples.CSharp
{
  
  class CurrencyExample
  {
    static void Main( string[] args )
    {
      Console.WriteLine();

   
      var v = new DoubleVector( "$4.30 $0.08 ($5.87)",
         NumberStyles.Number | NumberStyles.AllowCurrencySymbol | NumberStyles.AllowParentheses );

      Console.Out.WriteLine( v.ToString( "C" ) );

      
      v = v * 0.93; // exchange rate

      v = NMathFunctions.Round( v, 2 );

      
      Console.Out.WriteLine( v.ToString( "C" ) );

      Console.WriteLine();
      Console.WriteLine( "Press Enter Key" );
      Console.Read();

    } 

  }

}



Задание 6



using System;
using System.Collections.Generic;

public void TestDynAr()
{
	
	Console.WriteLine("Введите число элементов массива A1");
	int size = int.Parse(Console.ReadLine());
	int[] A1 = new int[size];
	Arrs.CreateOneDimAr(A1);
	Arrs.PrintAr1("A1",A1);
}
